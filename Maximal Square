# Dynamic-programming-approach
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if matrix==[]:
            return 0
        m=len(matrix)
        n=len(matrix[0])
        dp=[[0]*(len(matrix[0])+1) for i in range(len(matrix)+1)]
        #return dp
        for i in range(len(matrix[0])+1):
            dp[0][i]=int(matrix[0][i-1])
        for i in range(len(matrix)+1):
            dp[i][0]=int(matrix[i-1][0])
        #return dp
        for i in range(1,len(matrix)+1):
            for j in range(1,len(matrix[0])+1):
                if matrix[i-1][j-1]=="0":
                    dp[i][j]=0
                else:
                    dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1
        max1=0
        return dp
        for i in range(1,len(dp)):
            for j in range(1,len(dp[0])):
                if dp[i][j]>max1:
                    max1=dp[i][j]
        return max1*max1
        
