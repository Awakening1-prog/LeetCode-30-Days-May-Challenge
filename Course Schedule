class Solution:
    def dfs(self,graph,visited,v,restack):
        visited[v]=1
        restack[v]=1
        for i in graph[v]:
            if visited[i]==0:
                if self.dfs(graph,visited,i,restack)==1:
                    return 1
            elif restack[i]==1:
                return 1
        restack[v]=0
        return 0
    def cycle(self,graph,n):
        visited=[0]*n
        restack=[0]*n
        for i in range(n):
            if visited[i]==0:
                if self.dfs(graph,visited,i,restack)==1:
                    return 1
        else:
            return 0
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        n=numCourses
        root1=prerequisites
        graph=[[] for i in range(n)]
        for i in root1:
            src=i[0]
            des=i[1]
            graph[src].append(des)
           # graph[des].append(src)
        if self.cycle(graph,n)==1:
            return 0
        else:
            return 1
